name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
  schedule:
    # Cette expression cron exécute le workflow tous les jours à 00:00 UTC (minuit)
    - cron: '0 0 * * *'  # Exécution tous les jours à minuit UTC
    

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest] 
        node-version: [22.x]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Show Node.js version
        run: node -v  # Affiche la version de Node.js dans l'environnement CI

      # Install dependencies
      - name: Install dependencies
        run: |
          npm ci
          
      # Initialize Playwright
      - name: Initialize Playwright
        run: |
          npm init playwright@latest --yes

      # Install Playwright dependencies
      - name: Install Playwright browsers
        run: |
          npx playwright install --with-deps

      # Install Cucumber and related packages
      - name: Install Cucumber and Playwright-related packages
        run: |
          npm install @cucumber/cucumber
          npm install cucumber-html-reporter
          npm install pixelmatch pngjs
          npm install cross-env
          npm install ts-node typescript

      # Run tests (Cucumber and Playwright tests)
      - name: Run tests
        run: |
          if [ "$OSTYPE" == "linux-gnu" ]; then
              export HEADLESS=true
              echo "Running on Linux, HEADLESS=true"
          elif [ -n "$WINDIR" ]; then
              echo "Running on Windows, HEADLESS=true"
              echo "##vso[task.setvariable variable=HEADLESS]true"  # Pour Azure DevOps si besoin
          else
              echo "Unknown OS, please specify HEADLESS manually"
          fi
          echo "HEADLESS=$HEADLESS"
          npm test

      # Liste des fichiers dans le répertoire de rapports pour déboguer
      - name: List files in reports directory
        run: ls -al reports/

      # Step: Save reports as an artifact
      - name: Upload Cucumber HTML Report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: cucumber-reports  # Nom de l'artefact
          path: reports/cucumber_report_*.html  # Chemin du fichier généré
          
      - name: Send email with the test report
        if: always()  # Cette étape sera exécutée même si les tests échouent
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.GMAIL_USERNAME }}  # Votre adresse Gmail
          password: ${{ secrets.GMAIL_APP_PASSWORD }}  # Mot de passe d'application, pas votre mot de passe Gmail normal
          secure: true
          subject: "Résultats des Tests Cucumber CI"
          to: delplanquecyr@yahoo.fr  # Destinataire
          from: ${{ secrets.GMAIL_USERNAME }}  # L'expéditeur doit être la même adresse que username
          body: "Les tests automatisés ont été exécutés. Veuillez consulter les rapports en pièce jointe."
          html_body: |
            <h1>Résultats des Tests Automatisés</h1>
            <p>Bonjour,</p>
            <p>Les tests Cucumber ont été exécutés dans l'environnement CI. Vous trouverez les rapports détaillés en pièce jointe.</p>
            <p>Statut du build: ${{ job.status }}</p>
            <p>Voir les détails complets dans <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">le workflow GitHub</a>.</p>
            <p>Cordialement,<br>Votre système CI</p>
          attachments: ./reports/cucumber_report_*.html,./reports/cucumber_report_*.json
          priority: high